package com.janitri.phr.controller;


import com.janitri.phr.constants.PatientManagmentConstant;
import com.janitri.phr.dto.PatientDto;
import com.janitri.phr.exception.PatientMonitorException;
import com.janitri.phr.exception.PatientNotFoundException;
import com.janitri.phr.service.PatientService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Controller class dedicated to handle all the endpoint details to handle patient management CRUD operations
 */
@RestController
@RequestMapping("/patient")
public class PatientController {
    @Autowired
    PatientService patientService;


    @Operation(summary = "Get a Patient by its id")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response will have the details",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = PatientDto.class))}),
            @ApiResponse(responseCode = "404", description = PatientManagmentConstant.PATIENT_NOT_FOUND,
                    content = @Content)})
    /**
     * This method is dedicated to retrieve a patient by its id from H2 in-memory database
     * In case the patinet not present in DB , it will throw custom exception PatinetNotFound
     * example
     * 1.http://localhost:8080/patient/2
     * {
     *     "id": 2,
     *     "name": "Susmita",
     *     "address": "Bangalore ",
     *     "dateOfBirth": "1995-04-27",
     *     "checkUpDate": "2025-02-17",
     *     "heartRate": 70,
     *     "createdBy": "Susmita",
     *     "updatedBy": "John"
     * }
     *
     * 2. No patient for id 4
     * {
     *     "errorMessage": "Patient not found with given Id:4",
     *     "requestedURI": "/patient/4"
     * }
     */
    @GetMapping("/{id}")
    PatientDto getPatientById(@Parameter(description = "id of patient to be retrieved") @PathVariable String id) throws PatientNotFoundException {
        return patientService.getPatientById(Integer.parseInt(id));
    }

    @Operation(summary = "Get All patients in DB ")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response will have all patient details",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = PatientDto.class))}),
            @ApiResponse(responseCode = "404", description = PatientManagmentConstant.PATIENTS_NOT_FOUND,
                    content = @Content)})
    /**
     * This method is dedicated to retrieve all patients from H2 in-memory database
     * In case the patients  present in DB , it will throw custom exception PatientNotFound
     * example
     * http://localhost:8080/patient/all
     * [
     *    {
     *      *     "id": 2,
     *      *     "name": "Susmita",
     *      *     "address": "Bangalore ",
     *      *     "dateOfBirth": "1995-04-27",
     *      *     "checkUpDate": "2025-02-17",
     *      *     "heartRate": 70,
     *      *     "createdBy": "Susmita",
     *      *     "updatedBy": "John"
     *      * },
     *     {
     *      *     "id": 3,
     *      *     "name": "Susmita_2",
     *      *     "address": "Bangalore ",
     *      *     "dateOfBirth": "1995-04-25",
     *      *     "checkUpDate": "2025-02-17",
     *      *     "heartRate": 72,
     *      *     "createdBy": "Susmita",
     *      *     "updatedBy": "John"
     *      * }
     * ]
     *
     * 2. No patient in DB
     * {
     *     "errorMessage": "No patients found in DB",
     *     "requestedURI": "/patient/all"
     * }
     */
    @GetMapping("/all")
    List<PatientDto> getAllPatients() throws PatientNotFoundException {
        return patientService.getAllPatients();
    }

    @Operation(summary = "Save/Create a Patient with details, ID will be autogenerated and will be availabe in response ")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response will have the details of the saved patient",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = PatientDto.class))}),
            @ApiResponse(responseCode = "400", description = "errorMessage\": \"{fieldName=fieldName is mandatory}",
                    content = @Content)}
    )

    /**
     * This API is responsible to create/save a patient in in-memory h2 database
     * it accepts patient dto json structure as in put body and returns the saved data as response
     * This also handles the mandatory field validations for each input fields
     * we should not pass ID and JPA will generate the id and return in response it will still save the details with latest details
     * @param PatientDto
     * {
     *
     *      *      *     "name": "Susmita",
     *      *      *     "address": "Bangalore ",
     *      *      *     "dateOfBirth": "1995-04-27",
     *      *      *     "checkUpDate": "2025-02-17",
     *      *      *     "heartRate": 70,
     *      *      *     "createdBy": "Susmita",
     *      *      *     "updatedBy": "John"
     *      *      * }
     * @return PatientDto
    {
     *      *     "id": 2,
     *      *     "name": "Susmita",
     *      *     "address": "Bangalore ",
     *      *     "dateOfBirth": "1995-04-27",
     *      *     "checkUpDate": "2025-02-17",
     *      *     "heartRate": 70,
     *      *     "createdBy": "Susmita",
     *      *     "updatedBy": "John"
     *
     * 2. With empty name:-
     * {
     *     "errorMessage": "{name=Name is mandatory}",
     *     "requestedURI": "/patient"
     * }
     */
    @PostMapping(produces = "application/json", consumes = "application/json")
    PatientDto createPatient(@Valid @RequestBody PatientDto PatientDto) throws PatientMonitorException {
        return patientService.savePatient(PatientDto);
    }

    @Operation(summary = "Update a patient with given details")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response with the updated patient details",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = PatientDto.class))}),
            @ApiResponse(responseCode = "400", description = "errorMessage\": \"{fieldName=fieldName is mandatory}",
                    content = @Content),
            @ApiResponse(responseCode = "404", description = PatientManagmentConstant.PATIENT_NOT_FOUND,
                    content = @Content)})
    @PutMapping(produces = "application/json", consumes = "application/json")
    /**
     * This API is responsible to update an existing  patient heartrate wit in in-memory h2 database
     * it accepts patient dto json structure as in put body and returns the saved data as response
     * This also handles the mandatory field validations for each input fields
     * @param PatientDto
     * {
     *     "id": 2,
     *     "name": "Susmita",
     *     "address": "Bangalore ",
     *     "dateOfBirth": "1995-04-27",
     *     "checkUpDate": "2025-02-17",
     *     "heartRate": 75,
     *     "createdBy": "Susmita",
     *     "updatedBy": "John"
     * }
     * Response: Success
     * {
     *     "id": 2,
     *     "name": "Susmita",
     *     "address": "Bangalore ",
     *     "dateOfBirth": "1995-04-27",
     *     "checkUpDate": "2025-02-17",
     *     "heartRate": 75,
     *     "createdBy": "Susmita",
     *     "updatedBy": "John"
     * }
     *
     * 2.with empty Name:
     * {
     *         "errorMessage": "{name=Name is mandatory}",
     *          "requestedURI": "/patient"
     *   }
     */

    PatientDto updatePatient(@Valid @RequestBody PatientDto patientDto) throws PatientNotFoundException,PatientMonitorException {
        return patientService.updatePatient(patientDto);
    }



}
