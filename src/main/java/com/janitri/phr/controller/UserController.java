package com.janitri.phr.controller;


import com.janitri.phr.constants.PatientManagmentConstant;
import com.janitri.phr.dto.PatientDto;
import com.janitri.phr.dto.UserDto;
import com.janitri.phr.exception.PatientMonitorException;
import com.janitri.phr.exception.PatientNotFoundException;
import com.janitri.phr.exception.UserCredentailException;
import com.janitri.phr.exception.UserNotFoundException;
import com.janitri.phr.service.PatientService;
import com.janitri.phr.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Controller class dedicated to handle all the endpoint details to handle patient management CRUD operations
 */
@RestController
@RequestMapping("/patient")
public class UserController {
    @Autowired
    UserService userService;


    @Operation(summary = "Save/Create a patient with details, ID will be autogenerated and will be availabe in response ")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response will have the details of the saved patient",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = PatientDto.class))}),
            @ApiResponse(responseCode = "400", description = "errorMessage\": \"{fieldName=fieldName is mandatory}",
                    content = @Content)}
    )

    /**
     * This API is responsible to regster a user  in in-memory h2 database
     * it accepts patient dto json structure as in put body and returns the saved data as response
     * This also handles the mandatory field validations for each input fields
     * we should not pass ID and JPA will generate the id and return in response it will still save the details with latest details
     * @param PatientDto
     * {
     *     "name": "Susmita",
     *     "email": "msusmita010@gmal.com",
     *     "password": "test_pass",
     *     "phone": "9999999999",
     *     "createdBy":"Susmita",
     *     "updatedBy":"John"
     * }
     * @return PatientDto
     * {
     *     "id": 1,
     *      "name": "Susmita",
     *      *     "email": "msusmita010@gmal.com",
     *      *     "password": "test_pass",
     *      *     "phone": "9999999999",
     *      *     "createdBy":"Susmita",
     *      *     "updatedBy":"John"
     * }
     *
     * 2. With empty name:-
     * {
     *     "errorMessage": "{name=Name is mandatory}",
     *     "requestedURI": "/user"
     * }
     */
    @PostMapping(produces = "application/json", consumes = "application/json",value="/register")
    UserDto registerUser(@Valid @RequestBody UserDto userDto) throws PatientMonitorException {
        return userService.register(userDto);
    }





    @Operation(summary = "Save/Create a patient with details, ID will be autogenerated and will be availabe in response ")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response will have the details of the saved patient",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = PatientDto.class))}),
            @ApiResponse(responseCode = "400", description = "errorMessage\": \"{fieldName=fieldName is mandatory}",
                    content = @Content)}
    )

    /**
     * This API is responsible to login a user by matching user name and password in in-memory h2 database
     * it accepts patient dto json structure as in put body and returns the saved data as response
     * This also handles the mandatory field validations for each input fields
     * we should not pass ID and JPA will generate the id and return in response it will still save the details with latest details
     * @param PatientDto
     * {
     *
     *     "email": "msusmita010@gmal.com",
     *     "password": "test_pass",
     *
     * }
     * @return PatientDto
     * {
     *     "id": 1,
     *      "name": "Susmita",
     *      *     "email": "msusmita010@gmal.com",
     *      *     "password": "test_pass",
     *      *     "phone": "9999999999",
     *      *     "createdBy":"Susmita",
     *      *     "updatedBy":"John"
     * }
     *
     * 2. With empty email:-
     * {
     *     "errorMessage": "{email=Email is mandatory}",
     *     "requestedURI": "/user"
     * }
     */
    @PostMapping(produces = "application/json", consumes = "application/json",value="/login")
    UserDto login(@Valid @RequestBody UserDto userDto) throws UserNotFoundException, UserCredentailException {
        return userService.login(userDto);
    }



}
